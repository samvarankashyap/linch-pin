- name: "Provisioning AWS_ROUTE53 Resource"
  route53:
    aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
    aws_secret_key: "{{  auth_var['aws_secret_access_key'] | default(omit) }}"
    alias: "{{  res_def['alias'] | default(omit) }}"
    alias_evaluate_target_health: "{{  res_def['alias_evaluate_target_health'] | default(omit) }}"
    alias_hosted_zone_id: "{{  res_def['alias_hosted_zone_id'] | default(omit) }}"
    debug_botocore_endpoint_logs: "{{  res_def['debug_botocore_endpoint_logs'] | default(omit) }}"
    ec2_url: "{{  res_def['ec2_url'] | default(omit) }}"
    failover: "{{  res_def['failover'] | default(omit) }}"
    health_check: "{{  res_def['health_check'] | default(omit) }}"
    hosted_zone_id: "{{  res_def['hosted_zone_id'] | default(omit) }}"
    identifier: "{{  res_def['identifier'] | default(omit) }}"
    overwrite: "{{  res_def['overwrite'] | default(omit) }}"
    private_zone: "{{  res_def['private_zone'] | default(omit) }}"
    record: "{{  res_def['record'] }}"
    region: "{{  res_def['region'] | default(omit) }}"
    retry_interval: "{{  res_def['retry_interval'] | default(omit) }}"
    state: "{{ state }}"
    ttl: "{{  res_def['ttl'] | default(omit) }}"
    type: "{{  res_def['type'] | default(omit) }}"
    validate_certs: "no"
    value: "{{  res_def['value'] | default(omit) }}"
    vpc_id: "{{  res_def['vpc_id'] | default(omit) }}"
    wait: "yes"
    wait_timeout: "{{  res_def['wait_timeout'] | default(900) }}"
    weight: "{{  res_def['weight'] | default(omit) }}"
    zone: "{{  res_def['zone'] | default(omit) }}"
  when: res_def['role'] == 'aws_route53'
  no_log: "{{ not debug_mode }}"
  register: res_def_output

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_aws_net: "{{ topology_outputs_aws_net + [res_def] }}"
  when: res_def_output['changed'] == true and state == "present"

- name: "Add type to resource"
  set_fact:
    topology_outputs_aws_net: "{{ topology_outputs_aws_net | add_res_data(lookup('vars', 'role_name'), res_def['role']) }}"
  when: state == "present"
