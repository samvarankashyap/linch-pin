- name: "set ec2_vpc_route_table_facts"
  ec2_vpc_route_table_facts:
    aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
    aws_secret_key: "{{  auth_var['aws_secret_access_key'] | default(omit) }}"
    region: "{{ res_def['region'] }}"
    filters:
      "tag:Name": "{{ res_def['route_table_name'] }}"
  register: register_route_table
  when: res_def['route_table_name'] is defined

- name: get all route_table_ids when route_table_name is defined
  set_fact:
    route_table_ids: "{{ register_route_table['route_tables'] |
                         fetch_list_by_attr('id') }}"
  when: res_def['route_table_name'] is defined

- name: route_table_ids when route_table_name is not defined
  set_fact:
    route_table_ids: "{{ res_def['route_table_ids'] }}"
  when: res_def['route_table_ids'] is defined

- name: Handle deprecated modules
  block:
    # to be update after ansible 2.8 is deprecated
    - name: "Fetch vpc details when vpc_name is defined"
      ec2_vpc_net_facts:
        aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
        aws_secret_key: "{{ auth_var['aws_secret_access_key'] |
                            default(omit) }}"
        region: "{{ res_def['region'] }}"
        filters:
          "tag:Name": "{{ res_def['vpc_name'] }}"
      register: vpc_net_details
      when: res_def['vpc_name'] is defined
    - name: fail when above task is skipped
      fail:
        msg: >
          "fail when it is skipped or not available. failing back to
           deprecated module"
      when: vpc_net_details.skipped is defined
  rescue:
    - name: "Fetch vpc details when vpc_name is defined"
      ec2_vpc_net_info:
        aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
        aws_secret_key: "{{ auth_var['aws_secret_access_key'] |
                            default(omit) }}"
        region: "{{ res_def['region'] }}"
        filters:
          "tag:Name": "{{ res_def['vpc_name'] }}"
      register: vpc_net_details
      when: res_def['vpc_name'] is defined

- name: "Fetch vpc details when vpc_name is defined"
  set_fact:
    vpc_id_fetched: "{{ vpc_net_details['vpcs'] | first | default({}) |
                        fetch_attr('vpc_id', '') }}"
  when: res_def['vpc_name'] is defined

- name: Create new vpc endpoint the default policy
  ec2_vpc_endpoint:
    aws_access_key: "{{ auth_var['aws_access_key_id'] | default(omit) }}"
    aws_secret_key: "{{  auth_var['aws_secret_access_key'] | default(omit) }}"
    state: "{{ state | default('present') }}"
    region: "{{ res_def['region'] }}"
    vpc_id: "{{ vpc_id_fetched }}"
    profile: default
    service: "{{ res_def['service'] | default(omit) }}"
    policy: "{{ res_def['policy'] | default(omit) }}"
    policy_file: "{{ res_def['policy_file'] | default(omit) }}"
    route_table_ids: "{{ route_table_ids }}"
    validate_certs: "{{ res_def['validate_certs'] | default(false) }}"
    vpc_endpoint_id: "{{ res_def['vpc_endpoint_id'] | default('no') }}"
    wait: true
    wait_timeout: 600
  register: new_vpc_endpoint

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_aws_net: "{{ topology_outputs_aws_net +
                                  [new_vpc_endpoint] }}"

- name: "Add type to resource"
  set_fact:
    topology_outputs_aws_net: "{{ topology_outputs_aws_net |
                                  add_res_data(lookup('vars', 'role_name'),
                                               res_def['role']) }}"
  when: state == 'present'
