- name: "Set cred profile"
  set_fact:
    cred_profile: "{{ res_grp['credentials']['profile'] | default('default') }}"
  when: res_grp['credentials'] is defined

- name: "Get creds from auth driver"
  auth_driver:
    filename: "{{ res_grp['credentials']['filename'] }}"
    cred_type: "aws"
    cred_path: "{{ creds_path | default(default_credentials_path) }}"
    driver: "file"
    vault_enc: "{{ vault_encryption }}"
    vault_pass: "{{ vault_pass }}"
  register: auth_var
  ignore_errors: true
  when: res_grp['credentials'] is defined
  no_log: "{{ not auth_debug }}"

- name: "Set auth_var"
  set_fact:
    auth_var: "{{ auth_var['output'][cred_profile] | default('') }}"
  ignore_errors: true
  when: auth_var is defined
  no_log: "{{ not auth_debug }}"

- name: "Get topology output data from resources file"
  output_parser:
    output_file: "{{ default_resources_path + '/' +
                     topo_data['topology_name'].replace(' ', '_').lower() +
                     '.output' }}"
  register: topo_output
  when: generate_resources

- name: "set topo_output_resources fact"
  set_fact:
    topo_output_resources: "{{ topo_output.output['content'] }}"
  when: generate_resources

- name: "Get topology output data from RunDB"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: get
    table: "{{ target }}"
    key: "outputs"
    run_id: "{{ orig_run_id }}"
    db_schema: "{{ rundb_schema }}"
  register: topo_output_rundb
  when: not generate_resources

- name: "convert topo_output_resources in rundb"
  set_fact:
    topo_output_json: "{{ topo_output_rundb.output | convert_to_json }}"
  when: not generate_resources

- name: setfact to variable
  set_fact:
    topo_out_json: "{{ topo_output_rundb.output | convert_to_json }}"
  when: not generate_resources

- name: "set topo_output_resources fact rundb"
  set_fact:
    topo_output_resources: "{{ topo_out_json[0]['resources'] }}"
  when: not generate_resources

- name: "teardown aws_ec2_vpc_internet_gateway resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_internet_gateway.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_internet_gateway"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_vpc_nat_gateway resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_nat_gateway.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_nat_gateway"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown of ec2 resource definitions of current group"
  include_tasks: teardown_aws_ec2.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources[0]['instances'] | default('') }}"
    - ["{{ res_grp['resource_group_name']  }}"]
  loop_control:
    loop_var: res_item

- name: "teardown of s3 resource def of current group"
  include_tasks: teardown_aws_s3.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_s3"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name']  }}"]
  loop_control:
    loop_var: res_item

- name: "teardown of aws_ec2_key resource def of current group"
  include_tasks: teardown_aws_ec2_key.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_ec2_key"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name']  }}"]
  loop_control:
    loop_var: res_item

- name: "teardown cfn stack resource def of current group"
  include_tasks: teardown_aws_cfn.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_cfn"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_eip resource def of current group"
  include_tasks: teardown_aws_ec2_eip.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_ec2_eip"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_vpc_endpoint resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_endpoint.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_endpoint"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_vpc_routetable resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_routetable.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_routetable"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_vpc_subnet resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_subnet.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_subnet"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown aws_ec2_vpc_net resource def of current group"
  include_tasks: teardown_aws_ec2_vpc_net.yml
  vars:
    res_def: "{{ res_item.0 }}"
    tp_out: "{{ res_item.1 }}"
    res_grp_name: "{{ res_item.2 }}"
  when: res_item.0['role'] == "aws_ec2_vpc_net"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - "{{ topo_output_resources }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown elb_lb resource def of current group"
  include_tasks: teardown_aws_ec2_elb_lb.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_ec2_elb_lb"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item

- name: "teardown security group resource def of current group"
  include_tasks: teardown_aws_sg.yml
  vars:
    res_def: "{{ res_item.0 }}"
    res_grp_name: "{{ res_item.1 }}"
  when: res_item.0['role'] == "aws_sg"
  with_nested:
    - "{{ res_grp['res_defs'] | default(res_grp['resource_definitions']) }}"
    - ["{{ res_grp['resource_group_name'] }}"]
  loop_control:
    loop_var: res_item
