---
- name: "Updating topology_outputs"
  set_fact:
    topology_outputs:
      dummy_res: "{{ topology_outputs_dummy | default([]) }}"
      os_server_res: "{{ topology_outputs_os_server | default([]) }}"
      os_keypair_res: "{{ topology_outputs_os_keypair | default([]) }}"
      os_volume_res: "{{ topology_outputs_os_volume | default([]) }}"
      os_obj_res: "{{ topology_outputs_os_object | default([]) }}"
      os_heat_res: "{{ topology_outputs_os_heat | default([]) }}"
      os_sg_res: "{{ topology_outputs_os_sg | default([]) }}"
      aws_ec2_res: "{{ topology_outputs_aws_ec2 | default([]) }}"
      aws_s3_res: "{{ topology_outputs_aws_s3 | default([]) }}"
      aws_ec2_key_res: "{{ topology_outputs_aws_ec2_key | default([]) }}"
      aws_cfn_res: "{{ topology_outputs_aws_cfn | default([]) }}"
      gcloud_gce_res: "{{ topology_outputs_gce | default([]) }}"
      duffy_res: "{{ topology_outputs_duffy | default([]) }}"
      rax_server_res: "{{ topology_outputs_rax_server | default([]) }}"
      beaker_res: "{{ topology_outputs_beaker_server | default([]) }}"
      libvirt_res: "{{ topology_outputs_libvirt_nodes | default([]) }}"
      openshift_res: "{{ topology_outputs_openshift_resources | default([]) }}"
      ovirt_vms_res: "{{ topology_outputs_ovirt_vms | default([]) }}"
  when: not async

- name: "Create output directories"
  file2:
    state: directory
    path: "{{ item }}"
  with_items:
    - "{{ default_resources_path | default( default_resources_path+'/' ) }}"
    - "{{ default_inventories_path | default( default_inventories_path+'/' ) }}"
  when: not async
  ignore_errors: yes

#- name: "DEBUG:: topology_outputs"
#  debug:
#    msg: "{{ topology_outputs }}"

- name: "Generate outputs when async is false"
  template:
    src: "../templates/output_formatter.j2"
    dest: "{{ resources_file | default( default_resources_path+'/'+
    outputs.topology_name.replace(' ', '_').lower()+'.output' ) }}"
  when: state == "present" and not async and output

# pretty much the same when we use async== false , seperated the task for probable customizations in future
- name: "Async:: Updating topology_outputs"
  set_fact:
    topology_outputs:
      dummy_res: "{{ topology_outputs_dummy | default([]) }}"
      os_server_res: "{{ topology_outputs_os_server | default([]) }}"
      os_keypair_res: "{{ topology_outputs_os_keypair | default([]) }}"
      os_volume_res: "{{ topology_outputs_os_volume | default([]) }}"
      os_obj_res: "{{ topology_outputs_os_object | default([]) }}"
      os_heat_res: "{{ topology_outputs_os_heat | default([])}}"
      os_sg_res: "{{ topology_outputs_os_sg | default([])}}"
      aws_ec2_res: "{{ topology_outputs_aws_ec2 | default([]) }}"
      aws_s3_res: "{{ topology_outputs_aws_s3 | default([]) }}"
      aws_ec2_key_res: "{{ topology_outputs_aws_ec2_key | default([]) }}"
      aws_cfn_res: "{{ topology_outputs_aws_cfn | default([]) }}"
      gcloud_gce_res: "{{ topology_outputs_gce | default([]) }}"
      duffy_res: "{{ topology_outputs_duffy | default([]) }}"
      rax_server_res: "{{ topology_outputs_rax_server | default([]) }}"
      beaker_res: "{{ topology_outputs_beaker_server | default([]) }}"
      libvirt_res: "{{ topology_outputs_libvirt_nodes | default([]) }}"
      ovirt_vms_res: "{{ topology_outputs_ovirt_vms | default([]) }}"
  when: async

# currently adding a single playbook that can manage all the async outputs based on the resource groups
- name: "wait and update outputs using jobids "
  include: update_async_outputs.yml
  when: async

# updates topology outputs for after the previous task
- name: "Async:: Updating topology_outputs after wait"
  set_fact:
    topology_outputs:
      dummy_res: "{{ topology_outputs_dummy | default([]) }}"
      os_server_res: "{{ async_outputs_os_server | default([]) }}"
      os_keypair_res: "{{ topology_outputs_os_keypair | default([]) }}"
      os_obj_res: "{{ async_outputs_os_obj | default([]) }}"
      os_volume_res: "{{ async_outputs_os_volume | default([]) }}"
      os_heat_res: "{{ async_outputs_os_heat | default([]) }}"
      os_sg_res: "{{ topology_outputs_os_sg | default([]) }}"
      aws_ec2_res: "{{ async_outputs_aws_ec2 | default([]) }}"
      aws_s3_res: "{{ topology_outputs_aws_s3 | default([]) }}"
      aws_ec2_key_res: "{{ topology_outputs_aws_ec2_key | default([]) }}"
      aws_cfn_res: "{{ async_outputs_aws_cfn | default([]) }}"
      gcloud_gce_res: "{{ async_outputs_gcloud_gce | default([]) }}"
      duffy_res: "{{ topology_outputs_duffy | default([]) }}"
      rax_server_res: "{{ topology_outputs_rax_server | default([]) }}"
      beaker_res: "{{ topology_outputs_beaker_server | default([]) }}"
      libvirt_res: "{{ topology_outputs_libvirt_nodes | default([]) }}"
      ovirt_vms_res: "{{ topology_outputs_ovirt_vms | default([]) }}"
  when: async

# pretty much the same output generation when async is False
# note: need to have a filter such that it matches the output when
# async is False, otherwise the inventory layout might face issues parsing!!!
- name: "Generate outputs when async is true"
  template:
    src: "../templates/output_formatter.j2"
    dest: "{{ resources_file | default( default_resources_path+'/'+
    outputs.topology_name.replace(' ', '_').lower()+'.output' ) }}"
  when: state == "present" and async and output

- name: "set name of the resources_file for inventory generation"
  set_fact:
    resources_file:  "{{ resources_file | default( default_resources_path+'/'+
    outputs.topology_name.replace(' ', '_').lower()+'.output' ) }}"
  when: state == "present"
