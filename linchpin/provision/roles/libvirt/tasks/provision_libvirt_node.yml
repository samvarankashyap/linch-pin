- set_fact:
      res_count: '{{ (res_count | default([])) + [item | int] }}'
  with_sequence: "start=0 end={{ res_def['count'] | int - 1 }}"

- set_fact:
    res_count: "{{ res_count | unique }}"

- name: "does node already exist"
  virt:
    name: "{{ nodeinfo[0] }}{{ nodeinfo[2] }}{{ nodeinfo[1] }}"
    command: status
    uri: "{{ nodeinfo[3] }}"
  with_nested:
    - "{{ libvirt_resource_name }}"
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
    - ["{{ res_def['uri'] }}"]
  ignore_errors: yes
  loop_control:
    loop_var: nodeinfo
  register: node_exists

- name: set cloud config default
  set_fact:
    cloud_config: "{{ res_def['cloud_config'] }}"
    cloud_config_used: true

- name: "check cloud_config is used or not"
  set_fact:
    cloud_config_used: "{{ true if (cloud_config['users'] }} == [] and cloud_config['run_commands'] == []) else false }}"

- name: "set empty local_image_path"
  set_fact:
    local_image_path: ''

- name: "set empty img_src_ext"
  set_fact:
    img_src_ext: ''

- name: "copy image_src: localhost"
  include: copy_image_src_local.yml
  when: node_exists['failed'] is defined and uri_hostname == 'localhost'

- name: "copy image_src: remote"
  include: copy_image_src_remote.yml remote_user={{ res_def['remote_user'] }}
  when: node_exists['failed'] is defined and uri_hostname != 'localhost'

- name: "set qemu_path"
  set_fact:
    qemu_path: "{{ (ansible_distribution in ['CentOS','RedHat']) | ternary('/usr/libexec/', '/usr/bin/') }}"

- name: set cloud_config virt_type
  set_fact:
    virt_type: "{{ cloud_config['virt_type'] | default('cloud-init') }}"

- name: "define node template"
  template:
    src: "../templates/libvirt_node.xml.j2"
    dest: "/tmp/{{ libvirt_resource_name }}{{ definition[4] }}{{ definition[2] }}"
  with_nested:
    - ["{{ res_def }}"]
    - "{{ res_count }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['name_separator'] }}"]
    - ["{{ res_def['disk_cache'] }}"]
    - ["{{ res_def['cpu_mode'] }}"]
    - ["{{ res_def['disk_type'] }}"]
  loop_control:
    loop_var: definition
  when:  node_exists['failed'] is defined

- name: "set_ssh_key_name"
  set_fact:
    ssh_key_path: "{{ default_ssh_key_path | default('~/.ssh/') }}/{{ res_def['ssh_key'] }}"

- name: "local: does ssh key already exists ?"
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key_stat_local
  when: uri_hostname == 'localhost'

- name: "remote: does ssh key already exists ?"
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key_stat_remote
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'
  vars:
    ansible_python_interpreter: "{{ res_def['remote_python_interpreter'] | default('/usr/bin/python3') }}"

- name: "local: Generate ssh keys when they don't exist"
  shell: "ssh-keygen -t rsa -f {{ ssh_key_path }} -N '';cat {{ ssh_key_path }}.pub >> ~/.ssh/authorized_keys"
  args:
    creates: "{{ ssh_key_path }}"
  when: uri_hostname =='localhost' and ssh_key_stat_local.stat.exists == false

- name: "remote: Generate ssh keys when they don't exist"
  shell: "ssh-keygen -t rsa -f {{ ssh_key_path }} -N '';cat {{ ssh_key_path }}.pub >> ~/.ssh/authorized_keys"
  args:
    creates: "{{ ssh_key_path }}"
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost' and ssh_key_stat_remote.stat.exists == false

- name: "local: cat out contents of public key"
  shell: "cat {{ ssh_key_path }}.pub"
  register: pubkey_local
  when: uri_hostname == 'localhost'

- name: "remote: cat out contents of public key"
  shell: "cat {{ ssh_key_path }}.pub"
  register: pubkey_remote
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- name: Add additional storage
  block:
  - name: "Add additional storage"
    command: "qemu-img resize {{ definition[1] }}/{{ definition[0] }}{{ definition[5] }}{{ definition[4] }}.{{ definition[2] }} +{{ definition[3] }}"
    with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ libvirt_image_path | expanduser }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['additional_storage'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
    loop_control:
      loop_var: definition
    become: "{{ libvirt_become }}"
    when: res_def['additional_storage'] is defined and node_exists['failed'] is defined and uri_hostname == 'localhost'

  - name: "Add additional storage"
    command: "qemu-img resize {{ definition[1] }}/{{ definition[0] }}{{ definition[5] }}{{ definition[4] }}.{{ definition[2] }} +{{ definition[3] }}"
    with_nested:
      - ["{{ libvirt_resource_name }}"]
      - ["{{ libvirt_image_path | expanduser }}"]
      - ["{{ img_src_ext }}"]
      - ["{{ res_def['additional_storage'] }}"]
      - "{{ res_count }}"
      - ["{{ res_def['name_separator'] }}"]
    loop_control:
      loop_var: definition
    become: "{{ libvirt_become }}"
    remote_user: "{{ res_def['remote_user'] }}"
    delegate_to: "{{ uri_hostname }}"
    when: res_def['additional_storage'] is defined and node_exists['failed'] is defined and uri_hostname != 'localhost'
  rescue:
  - fail:
      msg: 'Error running command qemu-img. Please make sure the dependencies are installed correctly . Try running `linchpin setup libvirt` to reinstall dependencies'

- include_tasks: virt_customize.yml
  when: virt_type == "virt-customize"

- name: "Create directories"
  file:
    path: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}"
    state: "directory"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "Create directories"
  file:
    path: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}"
    state: "directory"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "Prepare cloud-config/user-data-local"
  template:
    src: "templates/cloud-config/user-data"
    dest: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/user-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  vars:
    cloudconfig_users: "{{ cloud_config['users'] | default([]) }}"
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init" and cloud_config_used
  
- name: "Prepare cloud-config/user-data-remote"
  template:
    src: "templates/cloud-config/user-data"
    dest: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/user-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "Prepare cloud-config/meta-data"
  template:
    src: "templates/cloud-config/meta-data"
    dest: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/meta-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
    - ["{{ res_def['domain'] }}"]
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "Prepare cloud-config/meta-data remote"
  template:
    src: "templates/cloud-config/meta-data"
    dest: "/tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/meta-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
    - ["{{ res_def['domain'] }}"]
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "localhost: Generate ci data cd image for cloud-init when cloud config is defined"
  command: mkisofs -file-mode 0666 -o /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}.iso -V cidata -r -J --quiet /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/user-data /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/meta-data
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init" and cloud_config_used

- name: "remote_host: Generate ci data cd image for cloud-init when cloud config is defined"
  command: mkisofs -file-mode 0666 -o /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}.iso -V cidata -r -J --quiet /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/user-data /tmp/vm-{{ definition[0] }}{{ definition[2] }}{{ definition[1] }}/meta-data
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init" and cloud_config_used

- set_fact:
    vm_xml: "{% if res_def.xml is defined %}{{workspace}}/{{res_def.xml}}{% else %}libvirt_node.xml.j2{%endif%}"

- name: "define node"
  virt:
    name: "{{ libvirt_resource_name }}"
    command: define
    xml: "{{ lookup('template', vm_xml) }}"
    uri: "{{ definition[0]['uri'] }}"
  with_nested:
    - ["{{ res_def }}"]
    - "{{ res_count }}"
    - ["{{ local_image_path | default('') }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['name_separator'] }}"]
    - ["{{ res_def['disk_cache'] }}"]
    - ["{{ res_def['cpu_mode'] }}"]
    - ["{{ res_def['disk_type'] }}"]
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined
  ignore_errors: yes

- name: Attempt and graceful roll back demo
  block:
  - name: "Create disk if it does not exist"
    command: "qemu-img create -f qcow2 {{ libvirt_image_path }}/{{ libvirt_resource_name }}{{ definition[3] }}{{ definition[2] }}{{ definition[3] }}{{ definition[1]['name'] }}.qcow2 {{ definition[1]['size'] }}{{ definition[1]['units'] }}"
    with_nested:
    - ["{{ res_def['name'] }}"]
    - "{{ res_def['storage'] }}"
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
    loop_control:
      loop_var: definition
    when:
    - res_def['storage'] is defined
    - definition[1].source is not defined
    become: "{{ libvirt_become }}"
  rescue:
  - fail:
      msg: 'Error running command qemu-img. Please make sure the dependencies are installed correctly. Try running `linchpin setup libvirt` to reinstall dependencies'


- name: sync memory data to disk
  command: sync

- name: "Start VM"
  virt:
    name: "{{ definition[0] }}{{ definition[3] }}{{ definition[2] }}"
    state: "running"
    uri: "{{ definition[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  ignore_errors: no

- name: wait for the vm to shut down (cloud-init)
  virt:
    name: "{{ definition[0] }}{{ definition[3] }}{{ definition[2] }}"
    command: status
    uri: "{{ definition[1] }}"
  register: vmstatus
  until: vmstatus.status == 'shutdown'
  retries: 1500
  delay: 10
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and virt_type == "cloud-init" and cloud_config_used

- name: "Remove cdrom (cloud-init)"
  command: virsh -c {{ definition[1] }} change-media {{ definition[0] }}{{ definition[3] }}{{ definition[2] }} hda --eject --config
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  ignore_errors: yes
  when: node_exists['failed'] is defined and virt_type == "cloud-init" and cloud_config_used


- name: sync memory data to disk
  command: sync


- name: "Start VM again (post cloud-init)"
  virt:
    name: "{{ definition[0] }}{{ definition[3] }}{{ definition[2] }}"
    state: "running"
    uri: "{{ definition[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: definition
  ignore_errors: no
  when: node_exists['failed'] is defined and virt_type == "cloud-init" and cloud_config_used

- name: "dump node data"
  virt:
    name: "{{ data[0] }}{{ data[3] }}{{ data[2] }}"
    command: get_xml
    uri: "{{ data[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: data
  when: not _async
  register: node_data

- set_fact:
    networks: []

- set_fact:
    macs: []

- set_fact:
    networks: "{{ networks + [net] }}"
  loop: "{{ res_def['networks'] }}"
  loop_control:
    loop_var: net
  when:
    - res_def['networks'] is defined
    - net.dhcp is not defined or net.dhcp == true

- set_fact:
    network_names: []
    nets: []
    vm_names: []

- name: "Build a vm list"
  set_fact:
    vm_names: "{{ vm_names + [ data[0]+data[3]+data[2]|string ] }}"
  with_nested:
    - "{{ libvirt_resource_name }}"
    - "{{ range(0,networks|length, 1)|list}}"
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] | default('_')  }}"]
  loop_control:
    loop_var: data


- name: Build a network name list
  set_fact: 
    network_names: "{{ network_names + [item[0]['name']] }}"
    nets: "{{nets + [item[0]] }}"
  with_nested:
      - "{{ networks }}"
      - "{{ res_count }}"

- virt_net:
    command: facts
  register: net_fact

- set_fact:
    netInfo: "{{net_fact.ansible_facts.ansible_libvirt_networks}}"


- set_fact:
    forward_modes: []

- set_fact:
    forward_modes: "{{forward_modes + [netInfo[name]['forward_mode']] }}"
  loop: "{{ network_names }}"
  loop_control:
    loop_var: name

- set_fact:
    IP_TYPE: []

- name: Differentiate IPs
  set_fact:
    IP_TYPE: "{{ IP_TYPE + [mode|ip_filter]}}"
  loop: "{{forward_modes}}"
  loop_control:
    loop_var: mode
- xml:
    xmlstring: "{{ node_data.results[net.1].get_xml }}"
    xpath: "//interface[@type='network' and ./source[@network='{{net.0.name}}']]/mac"
    content: attribute
  register: mac_addresses
  ignore_errors: yes
  loop_control:
    loop_var: net
  loop: "{{ networks|product(res_count)|list }}"
- set_fact:
    mac_length: "{{ networks|length*res_count|length }}"


- set_fact:
    macs: "{{ macs + [mac_addresses.results[node].matches[0].mac.address] }}"
  loop: '{{ range(0,mac_length|int,1)|list }}'
  loop_control:
    loop_var: node

- name: "Make sure the VMs are running"
  virt:
    name: "{{ definition[0] }}{{ definition[3] }}{{ definition[2] }}"
    state: "running"
    uri: "{{ definition[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] | default('_')  }}"]
  loop_control:
    loop_var: definition
  ignore_errors: no

- name: "mac_and_ip | wait up to 5 mins for dhcp ip address"
  shell: |
    /usr/sbin/ip n | grep -F {{ mac }} | awk {'print $1'} | grep -v ^fe80
  with_items:
    - "{{ macs }}"
  loop_control:
    loop_var: mac
  register: extract_ip_address_result
  until: extract_ip_address_result.stdout != ""
  retries: 30
  delay: 10
  when: uri_hostname == 'localhost'

- set_fact:
    ip_set: []

- set_fact: 
    ip_set: "{{ip_set + [extract_ip_address_result.results[num]['stdout']|omit_filter(omit)]}}"
  loop: "{{ range(0,mac_length|int, 1)|list}}"
  loop_control:
    loop_var: num
  when: uri_hostname == 'localhost'


- name: "mac_and_ip | wait up to 5 mins for dhcp ip address"
  shell: |
    /usr/sbin/ip n | grep -F {{ mac }} | awk {'print $1'} | grep -v ^fe80
  with_items:
    - "{{ macs }}"
  loop_control:
    loop_var: mac
  register: extract_ip_address_result_remote
  until: extract_ip_address_result_remote.stdout != ""
  retries: 30
  delay: 10
  remote_user: "{{ res_def['remote_user'] }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- set_fact: 
    ip_set: "{{ip_set + [extract_ip_address_result_remote.results[num]['stdout']|omit_filter(omit)]}}"
  loop: "{{ range(0,mac_length|int, 1)|list}}"
  loop_control:
    loop_var: num
  when: uri_hostname != 'localhost'

- name: "Append ip_addresses and node_data to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [ { 'name': vm_names[index], 'ip': ip_set[index],'ip_type': IP_TYPE[index] }] }}"
  loop: "{{ range(0, mac_length|int)|list }}"
  loop_control:
    loop_var: index
  when:
    - not _async and uri_hostname == 'localhost'
    - extract_ip_address_result is defined and extract_ip_address_result.changed == true

- name: "remote: Append ip_addresses and node_data to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [ { 'name': vm_names[index], 'ip': ip_set[index], 'ip_type': IP_TYPE[index] }] }}"
  loop: "{{ range(0, mac_length|int)|list }}"
  loop_control:
    loop_var: index
  when:
    - not _async and uri_hostname != 'localhost'
    - extract_ip_address_result_remote is defined and extract_ip_address_result_remote.changed == true

- name: "Append to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [ { 'name': data[0]+data[2]+data[1]|string }] }}"
  with_nested:
    - "{{ libvirt_resource_name }}"
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] }}"]
  loop_control:
    loop_var: data
  when:
    - extract_ip_address_result is not defined
    - extract_ip_address_result_remote is not defined

- name: "Update the ip in Inventory"
  # shell: virsh net-update {{ network['name']}} add ip-dhcp-host "<host mac='{{ macs.0 }}' name='{{ res_def['name'] }}' ip='{{ static_ip }}' />" --live --config
  virt_net:
    name: "{{network_names[num]}}"
    command: modify
    xml: "<host mac='{{ macs[num] }}' name='{{vm_names[num]}}' ip='{{ ip_set[num] }}'/>"
  when: 
    - nets[num]['static_ip_reserved'] is defined
    - nets[num]['static_ip_reserved'] == true
  loop: '{{ range(0,mac_length|int,1)|list }}'
  loop_control:
    loop_var: num
 
- name: "Make sure the vms are running when play ends"
  virt:
    name: "{{ definition[0] }}{{ definition[3] }}{{ definition[2] }}"
    state: "running"
    uri: "{{ definition[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - "{{ res_count }}"
    - ["{{ res_def['name_separator'] | default('_')  }}"]
  loop_control:
    loop_var: definition
  ignore_errors: no

- name: "Add types to resource"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes | add_res_data(lookup('vars', 'role_name'), res_def['role']) }}"
