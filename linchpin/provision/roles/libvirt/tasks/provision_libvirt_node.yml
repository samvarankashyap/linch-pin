- name: "register resource count"
  shell: python -c "print [x for x in range( 0, {{ res_def['count'] | default(1) }} )]"
  register: res_count

- name: "does node already exist"
  virt:
    name: "{{ nodeinfo[0] }}_{{ nodeinfo[1] }}"
    command: status
    uri: "{{ nodeinfo[1]['uri'] | default('qemu:///system') }}"
  with_nested:
    - "{{ libvirt_resource_name }}"
    - "{{ res_count.stdout }}"
  ignore_errors: yes
  loop_control:
    loop_var: nodeinfo
  register: node_exists

- name: "set empty local_image_path"
  set_fact:
    local_image_path: ''

- name: "set empty img_src_ext"
  set_fact:
    img_src_ext: ''

- name: "copy image_src: localhost"
  include: copy_image_src_local.yml
  when: node_exists['failed'] is defined and uri_hostname == 'localhost'

- name: "copy image_src: remote"
  include: copy_image_src_remote.yml remote_user={{ res_def['remote_user'] | default(ansible_user_id) }}
  when: node_exists['failed'] is defined and uri_hostname != 'localhost'

- name: "set qemu_path"
  set_fact:
    qemu_path: "{{ (ansible_distribution in ['CentOS','RedHat']) | ternary('/usr/libexec/', '/usr/bin/') }}"

- name: "define node template"
  template:
    src: "../templates/libvirt_node.xml.j2"
    dest: "/tmp/{{ libvirt_resource_name }}_{{ definition[3] }}"
  with_nested:
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
  loop_control:
    loop_var: definition
  when:  node_exists['failed'] is defined and res_def['cloud_config'] is not defined

- name: "set_ssh_key_name"
  set_fact:
    ssh_key_path: "{{ default_ssh_key_path | default('~/.ssh/') }}/{{ res_def['ssh_key'] | default(res_grp['resource_group_name'])}}"

- name: "remote: does ssh key already exists ?"
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key_stat_remote
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- name: "local: does ssh key already exists ?"
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key_stat_local
  when: uri_hostname == 'localhost'

- name: "remote: does ssh key already exists ?"
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key_stat_remote
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- name: "local: Generate ssh keys when they don't exist"
  shell: "ssh-keygen -t rsa -f {{ ssh_key_path }} -N '';cat {{ ssh_key_path }} >> ~/.ssh/authorized_keys"
  args:
    creates: "{{ ssh_key_path }}"
  when: uri_hostname =='localhost' and ssh_key_stat_local.stat.exists == false

- name: "remote: Generate ssh keys when they don't exist"
  shell: "ssh-keygen -t rsa -f {{ ssh_key_path }} -N '';cat {{ ssh_key_path }} >> ~/.ssh/authorized_keys"
  args:
    creates: "{{ ssh_key_path }}"
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost' and ssh_key_stat_remote.stat.exists == false

- name: "local: cat out contents of public key"
  shell: "cat {{ ssh_key_path }}.pub"
  register: pubkey_local
  when: uri_hostname == 'localhost'

- name: "remote: cat out contents of public key"
  shell: "cat {{ ssh_key_path }}.pub"
  register: pubkey_remote
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- name: "Add additional storage"
  command: "qemu-img resize {{ definition[1] }}/{{ definition[0] }}_{{ definition[4] }}.{{ definition[2] }} +{{ definition[3] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ libvirt_image_path | expanduser }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['additional_storage'] | default('1G') }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  become: "{{ libvirt_become }}"
  when: res_def['additional_storage'] is defined and node_exists['failed'] is defined and uri_hostname == 'localhost'

- name: "Add additional storage"
  command: "qemu-img resize {{ definition[1] }}/{{ definition[0] }}_{{ definition[4] }}.{{ definition[2] }} +{{ definition[3] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ libvirt_image_path | expanduser }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['additional_storage'] | default('1G') }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  become: "{{ libvirt_become }}"
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: res_def['additional_storage'] is defined and node_exists['failed'] is defined and uri_hostname != 'localhost'

- name: set cloud config default
  set_fact:
    cloud_config: "{{ res_def['cloud_config'] | default({})  }}"

- name: set cloud_config virt_type
  set_fact:
    virt_type: "{{ cloud_config['virt_type'] | default('cloud-init') }}"

- include_tasks: virt_customize.yml
  when: virt_type == "virt-customize"

- name: "Create directories"
  file:
    path: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}"
    state: "directory"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init"

- name: "Create directories"
  file:
    path: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}"
    state: "directory"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init"

- name: "Prepare cloud-config/user-data-local"
  template:
    src: "templates/cloud-config/user-data-local"
    dest: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}/user-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  vars:
    cloudconfig_users: "{{ cloud_config['users'] | default([]) }}"
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init"
  
- name: "Prepare cloud-config/user-data-remote"
  template:
    src: "templates/cloud-config/user-data-remote"
    dest: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}/user-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init"

- name: "Prepare cloud-config/meta-data"
  template:
    src: "templates/cloud-config/meta-data"
    dest: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}/meta-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init"

- name: "Prepare cloud-config/meta-data remote"
  template:
    src: "templates/cloud-config/meta-data"
    dest: "/tmp/vm-{{ definition[0] }}_{{ definition[1] }}/meta-data"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init"

- name: "localhost: Generate ci data cd image for cloud-init when cloud config is defined"
  command: mkisofs -o /tmp/vm-{{ definition[0] }}_{{ definition[1] }}.iso -V cidata -r -J --quiet /tmp/vm-{{ definition[0] }}_{{ definition[1] }}/user-data /tmp/vm-{{ definition[0] }}_{{ definition[1] }}/meta-data
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  when: node_exists['failed'] is defined and uri_hostname == 'localhost' and virt_type == "cloud-init" 

- name: "remote_host: Generate ci data cd image for cloud-init when cloud config is defined"
  command: mkisofs -o /tmp/vm-{{ definition[0] }}_{{ definition[1] }}.iso -V cidata -r -J --quiet /tmp/vm-{{ definition[0] }}_{{ definition[1] }}/user-data /tmp/vm-{{ definition[0] }}_{{ definition[1] }}/meta-data
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: node_exists['failed'] is defined and uri_hostname != 'localhost' and virt_type == "cloud-init"

- name: "Install VM when network_bridge is defined"
  command: "virt-install --connect {{ definition[6] }} --import --name {{ definition[0] }}_{{ definition[7] }} --autostart --network bridge={{ definition[3] }},model=virtio --ram {{ definition[4] }} --disk path={{ definition[1] }}/{{ definition[0] }}_{{ definition[7] }}.{{ definition[2] }},format={{ definition[5] }},bus=virtio,cache=none --disk path=/tmp/vm-{{ definition[0] }}_{{ definition[7] }}.iso,device=cdrom --wait 10 --os-type=linux --nographics"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ libvirt_image_path | expanduser }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['network_bridge'] | default('virbr0')  }}"]
    - ["{{ res_def['memory'] | default(1024)  }}"]
    - ["{{ res_def['format'] | default('qcow2')  }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  become: "{{ libvirt_become }}"
  ignore_errors: yes
  when: node_exists['failed'] is defined and res_def['network_bridge'] is defined and virt_type == "cloud-init" and cloud_config != {}

- name: "Install VM when networks are defined"
  command: "virt-install --connect {{ definition[6] }} --import --name {{ definition[0] }}_{{ definition[7] }} --autostart {{ definition[3] }},model=virtio --ram {{ definition[4] }} --disk path={{ definition[1] }}/{{ definition[0] }}_{{ definition[7] }}.{{ definition[2] }},format={{ definition[5] }},bus=virtio,cache=none --disk path=/tmp/vm-{{ definition[0] }}_{{ definition[7] }}.iso,device=cdrom --wait 10 --os-type=linux --nographics"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ libvirt_image_path | expanduser }}"]
    - ["{{ img_src_ext }}"]
    - ["{{ res_def['networks'] | format_libvirt_networks }}"]
    - ["{{ res_def['memory'] | default(1024)  }}"]
    - ["{{ res_def['format'] | default('qcow2')  }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  become: "{{ libvirt_become }}"
  ignore_errors: yes
  when: node_exists['failed'] is defined and res_def['networks'] is defined and virt_type == "cloud-init" 

- name: "Remove cloud-init cdrom"
  command: virsh -c {{ definition[1] }} change-media {{ definition[0] }}_{{ definition[2] }} hda --eject --config
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  ignore_errors: yes
  when: node_exists['failed'] is defined and virt_type == "cloud-init" 

- name: "define node when the cloud_config not defined"
  virt:
    name: "{{ libvirt_resource_name }}"
    command: define
    xml: "{{ lookup('template', 'libvirt_node.xml.j2') }}"
    uri: "{{ definition[0] }}"
  with_nested:
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
  loop_control:
    loop_var: definition
  when:  (node_exists['failed'] is defined) and  virt_type == 'virt-customize'
  ignore_errors: yes

- name: "Start VM"
  virt:
    name: "{{ definition[0] }}_{{ definition[2] }}"
    state: "running"
    uri: "{{ definition[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: definition
  ignore_errors: yes

- name: "Start relevant networks"
  virt_net:
    state: active
    name: "{{ net_item[0]['name'] }}"
    uri: "{{ net_item[1] }}"
  with_nested:
    - ["{{ res_def['networks'] }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
  loop_control:
    loop_var: net_item
  ignore_errors: yes

- name: "mac_and_ip | extract mac address"
  shell: >
    virsh -c {{ node[1] }} dumpxml {{ node[0] }}_{{ node[2] }}
    | grep 'mac address'
    | cut -f 2 -d "'"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: node
  register: extract_mac_address_result

- name: "mac_and_ip | wait up to 5 mins for dhcp ip address"
  shell: |
    /usr/sbin/arp -an | grep -F {{ extract_mac_address_result.results[mac].stdout }} | cut -f 2 -d "(" | cut -f 1 -d ")"
  with_items:
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: mac
  register: extract_ip_address_result
  until: extract_ip_address_result.stdout != ""
  retries: 30
  delay: 10
  when: uri_hostname == 'localhost'

- name: "mac_and_ip | wait up to 5 mins for dhcp ip address"
  shell: |
    /usr/sbin/arp -an | grep -F {{ extract_mac_address_result.results[mac].stdout }} | cut -f 2 -d "(" | cut -f 1 -d ")"
  with_items:
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: mac
  register: extract_ip_address_result_remote
  until: extract_ip_address_result_remote.stdout != ""
  retries: 30
  delay: 10
  remote_user: "{{ res_def['remote_user'] | default(ansible_user_id) }}"
  delegate_to: "{{ uri_hostname }}"
  when: uri_hostname != 'localhost'

- name: "dump node data"
  virt:
    name: "{{ data[0] }}_{{ data[2] }}"
    command: get_xml
    uri: "{{ data[1] }}"
  with_nested:
    - ["{{ libvirt_resource_name }}"]
    - ["{{ res_def['uri'] | default('qemu:///system') }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: data
  when: not async
  register: node_data

- name: "Set Output name"
  set_fact:
      output_name: "{{ data[0] }}_{{ data[1] }}"
  with_nested:
    - "{{ libvirt_resource_name }}"
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: data

- name: "Append ip_addresses and node_data to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [ { 'name': data[0], 'ip': extract_ip_address_result.results[data[1]].stdout }] }}"
  with_nested:
    - "{{ output_name }}"
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: data
  when: not async and uri_hostname == 'localhost'

- name: "Append ip_addresses and node_data to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [ { 'name': data[0], 'ip': extract_ip_address_result.results[data[1]].stdout }] }}"
  with_nested:
    - "{{ output_name }}"
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: data
  when: not async and uri_hostname != 'localhost'
