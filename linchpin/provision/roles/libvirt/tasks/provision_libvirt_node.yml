- name: "register resource count"
  shell: python -c "print [x for x in range( 0, {{ res_def['count'] | default(1) }} )]"
  register: res_count

- name: "does node already exist"
  virt:
    name: "linchpin_{{ nodeinfo[1]['res_name'] | default(nodeinfo[1]['name']) }}_{{ nodeinfo[2] }}"
    command: status
    uri: "{{ nodeinfo[1]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
  ignore_errors: yes
  loop_control:
    loop_var: nodeinfo
  register: node_exists

- name: set empty local_image_path
  set_fact:
    local_image_path: ''

- name: set empty img_src_ext
  set_fact:
    img_src_ext: ''

- name: "copy image_src"
  include: copy_image_src.yml
  when: node_exists['failed'] is defined

#-- add user data --
#
- name: libguestfs add user data
  debug:
    var: img_s_ext

- name: "define node"
  template:
    src: "../templates/libvirt_node.xml.j2"
    dest: "/tmp/{{ definition[1]['res_name'] }}_{{ definition[2] }}"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
  loop_control:
    loop_var: definition
  when:  node_exists['failed'] is defined

- name: "define node"
  virt:
    name: "linchpin_{{ instance[1]['res_name'] | default(instance[1]['name']) }}_{{ instance[2] }}"
    command: define
    xml: "{{ lookup('template', 'libvirt_node.xml.j2') }}"
    uri: "{{ definition[1]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
  loop_control:
    loop_var: definition
  when:  node_exists['failed'] is defined

#- name: "map ip and mac addresses in network"
#  virt_net:
#    command: modify
#    xml: "{{ lookup('template', 'libvirt_modify_mac.xml.j2') }}"
#  with_items:
#    - "{{ res_def['networks'] }}"
#  loop_control:
#    loop_var: map_item

- name: "start relevant networks"
  virt_net:
    state: active
    name: "{{ net_item['name'] }}"
  with_items:
    - "{{ res_def['networks'] }}"
  loop_control:
    loop_var: net_item

- name: "start node"
  virt:
    name: "linchpin_{{ instance[1]['res_name'] | default(instance[1]['name']) }}_{{ instance[2] }}"
    state: running
    uri: "{{ instance[1]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
    - ["{{ local_image_path }}"]
    - ["{{ img_src_ext }}"]
  loop_control:
    loop_var: instance
  when: async == false


- name: mac_and_ip | extract mac address
  shell: >
    virsh -c {{ node[1]['uri']| default('qemu:///system') }} dumpxml {{ node[0] }}_{{ node[1]['res_name'] }}_{{ node[2] }}
    | grep 'mac address'
    | cut -f 2 -d "'"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: node
  register: extract_mac_address_result

#- name: extract_mac_address_result
#  debug:
#    var: extract_mac_address_result.results[0].stdout

- name: mac_and_ip | wait for dhcp ip address
  shell: |
    until arp -an | grep -q -F {{ extract_mac_address_result.results[mac].stdout }}; do
      sleep 1
    done
    arp -an | grep -F {{ extract_mac_address_result.results[mac].stdout }} | cut -f 2 -d "(" | cut -f 1 -d ")"
  with_items:
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: mac
  register: extract_ip_address_result

#- name: extract_ip_address_result
#  debug:
#    var: extract_ip_address_result.results[{{ ip }}].stdout
#  with_items:
#    - "{{ res_count.stdout }}"
#  loop_control:
#    loop_var: ip

#- name: set_fact
#  set_fact:
#    libvirt_result_ip_addresses: []
#
#- name: libvirt_ip | extract facts
#  set_fact:
#    libvirt_result_ip_addresses: "{{ extract_ip_address_result.results[ip].stdout }}"
#  with_items:
#    - "{{ res_count.stdout }}"
#  loop_control:
#    loop_var: ip

- name: "dump node data"
  virt:
    name: "{{ data[0] }}_{{ data[1]['res_name'] }}_{{ data[2] }}"
    command: get_xml
    uri: "{{ data[1]['uri'] | default('qemu:///system') }}"
  with_nested:
    - ["{{ res_grp_name }}"]
    - ["{{ res_def }}"]
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: data
  when: async == false
  register: node_data

- name: "Append ip_addresses and node_data to topology_outputs_libvirt_nodes"
  set_fact:
    topology_outputs_libvirt_nodes: "{{ topology_outputs_libvirt_nodes + [extract_ip_address_result.results[xml_item].stdout] }}"
  with_items:
    - "{{ res_count.stdout }}"
  loop_control:
    loop_var: xml_item
  when: async == false

#- name: "Append outputitem to topology_outputs"
#  set_fact:
#    topology_outputs_libvirt_node: "{{ topology_outputs_libvirt_node + [res_def_output] }}"
