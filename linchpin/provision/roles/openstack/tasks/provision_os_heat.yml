- name: "Debug:: checking heat parameters "
  debug:
    msg: "{{ res_grp_vars | selectattr('resource_group_name', 'equalto', res_grp_name ) | first }}"

- name: "Set Heat parameters for template"
  set_fact:
    heat_params : "{{ res_grp_vars | selectattr('resource_group_name', 'equalto', res_grp_name ) | first }}"

- name: "Set Heat parameters for template"
  set_fact:
    heat_params : "{{ heat_params['heat_params'] }}"

- name: "provision/deprovision os_heat stack"
  os_hot_stack:
    stack_name: "{{ res_def['res_name'] | default(res_def['name']) }}"
    template: "{{ res_def['template_path'] }}"
    state: "{{ state }}"
    wait: "yes"
    os_username: "{{ username }}"
    os_password: "{{ password }}"
    os_tenant_name: "{{ project }}"
    os_auth_url: "{{ endpoint }}"
    parameters: "{{ heat_params }}"
  register: res_def_output
  when: async == false

- name: "Append outputitem to topology_outputs"
  set_fact:
    topology_outputs_os_heat: "{{ topology_outputs_os_heat + [ res_def_output.output ] }}"
  when: async == false

- name: "provision/deprovision os_heat stack"
  os_hot_stack:
    stack_name: "{{ res_def['res_name'] | default(res_def['name']) }}"
    template: "{{ res_def['template_path']  }}"
    state: "{{ state }}"
    wait: "yes"
    os_username: "{{ username }}"
    os_password: "{{ password }}"
    os_tenant_name: "{{ project }}"
    os_auth_url: "{{ endpoint }}"
    parameters: "{{ heat_params }}"
  async: "{{ async_timeout }}"
  poll: 0
  register: res_def_output
  when: async == true

# following tasks saves the async job details 
- name: "Async:: save the job id"
  set_fact:
    topology_outputs_os_heat: "{{ topology_outputs_os_heat + [ res_def_output ] }}"
  when: async == true
