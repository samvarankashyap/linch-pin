---

#- name: schema_v3
#  debug:
#    var: schema_v3
#
#- name: topology
#  debug:
#    var: topology
#
#- name: from_api
#  debug:
#    var: from_api

- name: "TARGET NAME DEBUG"
  debug:
    msg: "{{ target_name }}"

- name: "generate runid"
  shell: "python -c 'from uuid import getnode as get_mac; print get_mac()'"
  register: macid_output
  when: state == 'present'

- name: "generate timestamp"
  shell: "python -c 'import time; print(int(time.time()))'"
  register: timestamp_output
  when: state == 'present'


- name: "set fact for runid"
  set_fact:
    runid: "{{ runid | default(macid_output['stdout']+'_'+timestamp_output['stdout']) }}"
  when: state == 'present'

- name: "Create a db entry"
  hashlite:
    file_path: "/tmp/testdb.json"
    operation: "dictcreate"
    key: "{{ target_name }}_{{ runid }}"
  when: state == 'present'

- name: "Create a entries for topology name"
  hashlite:
    file_path: "/tmp/testdb.json"
    operation: "set"
    key: "{{ target_name }}_{{ runid }}"
    subkey: "topology_name"
    value: "{{ topology_name }}"
  when: state == 'present'

- name: "create lists for all resource types"
  hashlite:
    file_path: "/tmp/testdb.json"
    operation: listcreate
    key: "{{ item[1] }}"
    subkey: "{{ item[0] }}"
    force: true
  with_nested:
    - ["aws_ec2_res", "os_server_res", "gcloud_gce_res", "rax_server_res", "libvirt_res", "duffy_res", "dummy_res"]
    - ["{{ target_name }}_{{ runid }}"]
  when: state == 'present'

- name: "load ini evars from linchpin.conf"
  include: load_evars_from_ini.yml
  when: from_api is not defined

- name: "if topology_file is passed, set topology to its value"
  set_fact:
    topology: "{{ topology_file }}"
  when: topology_file is defined

- name: "if schema_file is passed, set schema to its value"
  set_fact:
    schema: "{{ schema_file }}"
  when: schema_file is defined

- name: "check topology file against the provided schema"
  schema_check:
    data: "{{ topology }}"
    schema: "{{ schema }}"
  register: out
  when: schema is defined

- name: "assign output from provided schema"
  set_fact:
     outputs: "{{ out['out'] }}"
  when: schema is defined

- name: "check topology file against schema_v3"
  schema_check:
    data: "{{ topology }}"
    schema: "{{ schema_v3 }}"
  register: v3_out
  tags: schema_validation
  when: schema is not defined
  ignore_errors: true

- name: "Set state for schema_v3 validation"
  set_fact:
    v3_schema_valid: "{{ v3_out['isvalid'] | default(false) }}"
  when: schema is not defined

- name: "assign schema_v3 output"
  set_fact:
     outputs: "{{ v3_out['out'] }}"
  when: schema is not defined and v3_schema_valid

- name: "check topology file against schema_v4"
  schema_check:
    data: "{{ topology }}"
    schema: "{{ schema_v4 }}"
  register: v4output
  tags: schema_validation
  when: schema is not defined and not v3_schema_valid

- name: "update output when schema_v4 is used"
  set_fact:
    v4_out: "{{ v4output }}"
  when: schema is not defined and not v3_schema_valid

- name: "assign output from schema_v4"
  set_fact:
     outputs: "{{ v4_out['out'] }}"
  when: schema is not defined and not v3_schema_valid

- name: "set fact for saving topology_job_ids"
  set_fact:
    topology_job_ids: []

- name: "Get the resource group types defined in topology"
  set_fact:
      res_grp_types: "{{ outputs.resource_groups | mapmultipleattr('res_group_type','resource_group_type') }}"

- name: "Filter resource_groups by type"
  set_fact:
    filtered_res_grps : "{{ res_grp_types | res_grp_filter( outputs.resource_groups, 'res_group_type','resource_group_type')  }}"

- name: "Assigning facts with respect to their group type"
  set_fact:
    dummy_res_grps: "{{  filtered_res_grps['dummy'] | default([]) }}"
    os_res_grps: "{{  filtered_res_grps['openstack'] | default([]) }}"
    aws_res_grps: "{{ filtered_res_grps['aws'] | default([]) }}"
    gcloud_res_grps: "{{ filtered_res_grps['gcloud'] | default([]) }}"
    duffy_res_grps: "{{ filtered_res_grps['duffy_node'] | default([]) }}"
    libvirt_res_grps: "{{ filtered_res_grps['libvirt'] | default([])}}"
    rax_res_grps: "{{ filtered_res_grps['rackspace'] | default([]) }}"
    bkr_res_grps: "{{ filtered_res_grps['beaker'] | default([]) }}"
    openshift_res_grps: "{{ filtered_res_grps['openshift'] | default([]) }}"

- name: "Registering resource group vars from topology"
  set_fact:
    res_grp_vars: "{{ outputs.resource_group_vars }}"
  when: outputs.resource_group_vars is defined

- name: "output vars"
  set_fact:
    topology_outputs: {}
